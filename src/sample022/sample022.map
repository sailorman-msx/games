CHGMOD                          = $005F ; const, local, , sample022, , initialize.asm:7
SETGRP                          = $007E ; const, local, , sample022, , initialize.asm:8
ERAFNK                          = $00CC ; const, local, , sample022, , initialize.asm:11
GTSTCK                          = $00D5 ; const, local, , sample022, , initialize.asm:12
GTTRIG                          = $00D8 ; const, local, , sample022, , initialize.asm:13
SNSMAT                          = $0141 ; const, local, , sample022, , initialize.asm:15
KILBUF                          = $0156 ; const, local, , sample022, , initialize.asm:16
EXTROM                          = $015F ; const, local, , sample022, , initialize.asm:19
SETPLT                          = $014D ; const, local, , sample022, , initialize.asm:20
LINWID                          = $F3AF ; const, local, , sample022, , initialize.asm:23
RG0SAV                          = $F3DF ; const, local, , sample022, , initialize.asm:24
FORCLR                          = $F3E9 ; const, local, , sample022, , initialize.asm:25
BAKCLR                          = $F3EA ; const, local, , sample022, , initialize.asm:26
BDRCLR                          = $F3EB ; const, local, , sample022, , initialize.asm:27
CLIKSW                          = $F3DB ; const, local, , sample022, , initialize.asm:28
INTCNT                          = $FCA2 ; const, local, , sample022, , initialize.asm:29
H_TIMI                          = $FD9F ; const, local, , sample022, , initialize.asm:30
H_PHYDIO                        = $FFA7 ; const, local, , sample022, , initialize.asm:31
ISMSX1FLG                       = $002D ; const, local, , sample022, , initialize.asm:34
CALSLT                          = $001C ; const, local, , sample022, , initialize.asm:37
H_NMI                           = $015F ; const, local, , sample022, , initialize.asm:38
EXPTBL                          = $FCC1 ; const, local, , sample022, , initialize.asm:39
RSLREG                          = $0138 ; const, local, , sample022, , initialize.asm:42
ENASLT                          = $0024 ; const, local, , sample022, , initialize.asm:43
CreateCharacterPattern          = $0000 ; addr, local, , sample022, , pcg_graphic2.asm:17
WK_VALUE08                      = $C232 ; const, local, , sample022, , variable_define.asm:69
CreateCharaPtnHiragana          = $0010 ; addr, local, , sample022, , pcg_graphic2.asm:32
CHRPTN_NUMALPHA                 = $0232 ; addr, local, , sample022, , data_pcg.asm:76
WK_CHARDATAADR                  = $C020 ; const, local, , sample022, , variable_define.asm:43
CreateCharacterPatternLoop      = $0022 ; addr, local, , sample022, , pcg_graphic2.asm:49
CreateCharaPtnTiles             = $001C ; addr, local, , sample022, , pcg_graphic2.asm:44
CHRPTN_HIRAGANA                 = $0389 ; addr, local, , sample022, , data_pcg.asm:159
CHRPTN                          = $0177 ; addr, local, , sample022, , data_pcg.asm:10
CreateCharacterPatternEnd       = $00DB ; addr, local, , sample022, , pcg_graphic2.asm:223
WK_CHARCODE                     = $C022 ; const, local, , sample022, , variable_define.asm:44
GetCharacterVRAMAddress         = $00DC ; addr, local, , sample022, , pcg_graphic2.asm:232
WRTVRMSERIAL                    = $46A2 ; addr, local, , sample022, , vram.asm:216
WK_HLREGBACK                    = $C23D ; const, local, , sample022, , variable_define.asm:86
ColorNumAlpha                   = $007A ; addr, local, , sample022, , pcg_graphic2.asm:134
SetColorDatas                   = $008C ; addr, local, , sample022, , pcg_graphic2.asm:148
ColorHiragana                   = $0086 ; addr, local, , sample022, , pcg_graphic2.asm:143
CHRPTN_NUMALPHA_COLOR           = $0222 ; addr, local, , sample022, , data_pcg.asm:68
CHRPTN_HIRAGANA_COLOR           = $022A ; addr, local, , sample022, , data_pcg.asm:72
NextNotTiles                    = $00CD ; addr, local, , sample022, , pcg_graphic2.asm:210
NextDataPattern                 = $00D0 ; addr, local, , sample022, , pcg_graphic2.asm:214
InitialPCGDatas                 = $00E8 ; addr, local, , sample022, , pcg_graphic2.asm:253
WK_UNIONRAM                     = $C800 ; const, local, , sample022, , variable_define.asm:17
REDVRMSERIAL                    = $4667 ; addr, local, , sample022, , vram.asm:130
WRTVRMFIL                       = $4686 ; addr, local, , sample022, , vram.asm:175
CreateSpritePattern             = $0151 ; addr, local, , sample022, , sprite_define.asm:11
SPRPTN                          = $054C ; addr, local, , sample022, , data_sprite.asm:6
InitializeVirtSpritePattern     = $459B ; addr, local, , sample022, , sprite.asm:10
Header                          = $4000 ; addr, local, , sample022, , initialize.asm:74
Start                           = $4010 ; addr, local, , sample022, , initialize.asm:81
NORMAL_CHGMOD                   = $4040 ; addr, local, , sample022, , initialize.asm:114
CALSLT_CHGMOD                   = $4034 ; addr, local, , sample022, , initialize.asm:106
BiosInterSlotCall               = $4564 ; addr, local, , sample022, , interslotcall.asm:22
SetGraphic2                     = $4048 ; addr, local, , sample022, , initialize.asm:120
BiosCall                        = $455D ; addr, local, , sample022, , interslotcall.asm:4
NORMAL_SETGRP2                  = $405A ; addr, local, , sample022, , initialize.asm:132
SetWidth32                      = $405D ; addr, local, , sample022, , initialize.asm:137
SetERAFNK                       = $4062 ; addr, local, , sample022, , initialize.asm:142
NORMAL_SETERAFNK                = $4074 ; addr, local, , sample022, , initialize.asm:154
SetCLIKSW                       = $4077 ; addr, local, , sample022, , initialize.asm:158
WK_VRAM_SYNC                    = $C00B ; const, local, , sample022, , variable_define.asm:37
MemFil                          = $4152 ; addr, local, , sample022, , common.asm:11
PAGE0_FUNC                      = $C000 ; const, local, , sample022, , variable_define.asm:26
ChangePage0Call                 = $42B0 ; addr, local, , sample022, , changepage.asm:5
SetColorPalleteMSX1             = $40CD ; addr, local, , sample022, , initialize.asm:215
SkipColorPallete                = $4113 ; addr, local, , sample022, , initialize.asm:270
ColorPalleteData                = $40F3 ; addr, local, , sample022, , initialize.asm:251
ColorPalleteSetLoop             = $40DB ; addr, local, , sample022, , initialize.asm:227
BiosNotFDDSubRomCall            = $4560 ; addr, local, , sample022, , interslotcall.asm:16
WK_GAMESTATUS                   = $C008 ; const, local, , sample022, , variable_define.asm:31
GameInitialize                  = $4339 ; addr, local, , sample022, , gameinit.asm:1
HTIMIHookLoop                   = $411A ; addr, local, , sample022, , sample022.asm:8
VSYNC_WAIT_CNT                  = $C007 ; const, local, , sample022, , variable_define.asm:30
VSYNC_Wait                      = $411F ; addr, local, , sample022, , sample022.asm:17
StartGameMain                   = $4126 ; addr, local, , sample022, , sample022.asm:26
TitleDisplayProc                = $443B ; addr, local, , sample022, , title.asm:5
GameMainProc                    = $435F ; addr, local, , sample022, , game.asm:1
DialogProc                      = $4438 ; addr, local, , sample022, , dialog.asm:5
GameOverProc                    = $4443 ; addr, local, , sample022, , gameover.asm:1
NextHTIMIHook                   = $4147 ; addr, local, , sample022, , sample022.asm:47
MemFilLoop                      = $4152 ; addr, local, , sample022, , common.asm:13
MemCpy                          = $4159 ; addr, local, , sample022, , common.asm:29
MemCpyLoop                      = $4159 ; addr, local, , sample022, , common.asm:31
IntMemCpy                       = $4162 ; addr, local, , sample022, , common.asm:49
IntMemCpyLoop                   = $4162 ; addr, local, , sample022, , common.asm:51
SortValues                      = $416B ; addr, local, , sample022, , common.asm:67
WK_SORTVALUE01                  = $C234 ; const, local, , sample022, , variable_define.asm:73
SortValuesLoop1                 = $417C ; addr, local, , sample022, , common.asm:94
WK_SORTVALUE02                  = $C235 ; const, local, , sample022, , variable_define.asm:74
SortValuesLoop2                 = $4184 ; addr, local, , sample022, , common.asm:103
WK_SORTVALUE04                  = $C237 ; const, local, , sample022, , variable_define.asm:76
WK_SORTVALUE03                  = $C236 ; const, local, , sample022, , variable_define.asm:75
SortValuesLoop2Next             = $41A7 ; addr, local, , sample022, , common.asm:125
SortValuesLoop2Swap             = $419B ; addr, local, , sample022, , common.asm:118
SortValuesEnd                   = $41C1 ; addr, local, , sample022, , common.asm:144
InitRandom                      = $41C2 ; addr, local, , sample022, , common.asm:153
WK_RANDOM_VALUE                 = $C233 ; const, local, , sample022, , variable_define.asm:70
RandomValue                     = $41C9 ; addr, local, , sample022, , common.asm:160
AbsA                            = $41DD ; addr, local, , sample022, , common.asm:187
Divide                          = $41E2 ; addr, local, , sample022, , common.asm:207
DivLoop                         = $41EA ; addr, local, , sample022, , common.asm:213
DivideBy8                       = $41F0 ; addr, local, , sample022, , common.asm:225
CalcMulti                       = $4205 ; addr, local, , sample022, , common.asm:257
CalcMulti1                      = $420D ; addr, local, , sample022, , common.asm:270
CalcMulti2                      = $4211 ; addr, local, , sample022, , common.asm:294
NumToStr                        = $4216 ; addr, local, , sample022, , common.asm:313
WK_STRINGBUF                    = $C23C ; const, local, , sample022, , variable_define.asm:83
WK_NUMTOCHARVAL                 = $C01F ; const, local, , sample022, , variable_define.asm:42
NumToStr1thPlace                = $426C ; addr, local, , sample022, , common.asm:385
NumToStr10thPlace               = $424B ; addr, local, , sample022, , common.asm:360
NumToStr100thPlace              = $422F ; addr, local, , sample022, , common.asm:339
NumToStrEnd                     = $4273 ; addr, local, , sample022, , common.asm:392
GetString                       = $4277 ; addr, local, , sample022, , common.asm:408
GetStingLoop                    = $428C ; addr, local, , sample022, , common.asm:433
GetStringLoopEnd                = $4297 ; addr, local, , sample022, , common.asm:446
GetStringByIndex                = $429C ; addr, local, , sample022, , common.asm:478
GetStringByIndexLoop            = $42A0 ; addr, local, , sample022, , common.asm:486
NO_SS                           = $42E6 ; addr, local, , sample022, , changepage.asm:70
Page0FuncRetAddr                = $430B ; addr, local, , sample022, , changepage.asm:114
WK_SPRITE0_NUM                  = $C023 ; const, local, , sample022, , variable_define.asm:47
ClearScreen                     = $473A ; addr, local, , sample022, , vram.asm:423
WK_ANGLE                        = $C243 ; const, local, , sample022, , variable_define.asm:93
WK_ANIME_PTN                    = $C225 ; const, local, , sample022, , variable_define.asm:50
WK_REDRAW_FINE                  = $C00C ; const, local, , sample022, , variable_define.asm:38
INIT_H_TIMI_HANDLER             = $477C ; addr, local, , sample022, , interval.asm:14
WK_TIME05                       = $C00A ; const, local, , sample022, , variable_define.asm:34
GameMainProcEnd                 = $4435 ; addr, local, , sample022, , game.asm:278
ResetAngle                      = $4371 ; addr, local, , sample022, , game.asm:24
SkipResetAngle                  = $4372 ; addr, local, , sample022, , game.asm:29
TRIGFUNC_TBL                    = $47F8 ; addr, local, , sample022, , data_trigono.asm:38
WK_VALUE01                      = $C22B ; const, local, , sample022, , variable_define.asm:62
SkipSetMinusFlagY               = $439A ; addr, local, , sample022, , game.asm:77
SetIntMulti64Y                  = $43AB ; addr, local, , sample022, , game.asm:102
PointMulti64Y                   = $43A4 ; addr, local, , sample022, , game.asm:91
JudgeYMinus                     = $43B2 ; addr, local, , sample022, , game.asm:114
SetPOSY                         = $43BC ; addr, local, , sample022, , game.asm:125
WK_POSY                         = $C245 ; const, local, , sample022, , variable_define.asm:95
SkipSetMinusFlagX               = $43DE ; addr, local, , sample022, , game.asm:167
SetIntMulti64X                  = $43EF ; addr, local, , sample022, , game.asm:192
PointMulti64X                   = $43E8 ; addr, local, , sample022, , game.asm:181
JudgeXMinus                     = $43F6 ; addr, local, , sample022, , game.asm:204
SetPOSX                         = $4400 ; addr, local, , sample022, , game.asm:215
WK_POSX                         = $C244 ; const, local, , sample022, , variable_define.asm:94
WK_SPRITE_MOVETBL               = $C025 ; const, local, , sample022, , variable_define.asm:49
ResetAnimeNum                   = $4422 ; addr, local, , sample022, , game.asm:250
SetColorNum                     = $4423 ; addr, local, , sample022, , game.asm:254
SetVirtAttrTable                = $45B0 ; addr, local, , sample022, , sprite.asm:44
ShuffleSprite                   = $45F4 ; addr, local, , sample022, , sprite.asm:123
WK_SPRREDRAW_FINE               = $C024 ; const, local, , sample022, , variable_define.asm:48
KeyInputProc                    = $4446 ; addr, local, , sample022, , keyinput.asm:21
WK_PLAYERDIST                   = $C227 ; const, local, , sample022, , variable_define.asm:54
KeyInputProcCheckZkey           = $4451 ; addr, local, , sample022, , keyinput.asm:34
KeyInputProcZup                 = $4465 ; addr, local, , sample022, , keyinput.asm:54
WK_TRIGGERA                     = $C228 ; const, local, , sample022, , variable_define.asm:55
KeyInputProc_IsCURSOR           = $44FC ; addr, local, , sample022, , keyinput.asm:180
KeyInputProcZpress              = $445D ; addr, local, , sample022, , keyinput.asm:46
KeyInputProcCheckXKey           = $447E ; addr, local, , sample022, , keyinput.asm:75
KeyInputProcZupStep2            = $4475 ; addr, local, , sample022, , keyinput.asm:66
KeyInputProcXup                 = $4495 ; addr, local, , sample022, , keyinput.asm:96
WK_TRIGGERB                     = $C229 ; const, local, , sample022, , variable_define.asm:56
KeyInputProcXpress              = $448D ; addr, local, , sample022, , keyinput.asm:88
KeyInputProc_IsAbutton          = $44A2 ; addr, local, , sample022, , keyinput.asm:107
KeyInputProcAup                 = $44BA ; addr, local, , sample022, , keyinput.asm:127
KeyInputProcApress              = $44B2 ; addr, local, , sample022, , keyinput.asm:119
KeyInputProc_IsAupStep2         = $44CA ; addr, local, , sample022, , keyinput.asm:139
KeyInputProc_IsBbutton          = $44D7 ; addr, local, , sample022, , keyinput.asm:150
KeyInputProcBup                 = $44EF ; addr, local, , sample022, , keyinput.asm:170
KeyInputProcBpress              = $44E7 ; addr, local, , sample022, , keyinput.asm:162
WK_KEYIN_INTERVAL               = $C226 ; const, local, , sample022, , variable_define.asm:53
KeyInputProc_End                = $4559 ; addr, local, , sample022, , keyinput.asm:282
KeyInputProcSetInterval5        = $4511 ; addr, local, , sample022, , keyinput.asm:198
KeyInputProcSetInterval         = $4513 ; addr, local, , sample022, , keyinput.asm:203
KeyInputProc_KeyInEnd           = $4527 ; addr, local, , sample022, , keyinput.asm:231
KeyInputProc_IsJOYSTICK         = $451E ; addr, local, , sample022, , keyinput.asm:218
KeyInputProc_KeyEndAdjTRIGAOff  = $4539 ; addr, local, , sample022, , keyinput.asm:245
KeyInputProc_KeyEndAdjSTCK      = $453A ; addr, local, , sample022, , keyinput.asm:249
KeyInputProc_Judge4             = $4541 ; addr, local, , sample022, , keyinput.asm:257
KeyInputProc_Judge6             = $4548 ; addr, local, , sample022, , keyinput.asm:264
KeyInputProc_Judge8             = $454F ; addr, local, , sample022, , keyinput.asm:271
KeyInputProc_SetDist            = $4556 ; addr, local, , sample022, , keyinput.asm:278
BiosCallNotFDD                  = $455F ; addr, local, , sample022, , interslotcall.asm:10
BiosFDDSubRomCall               = $456D ; addr, local, , sample022, , interslotcall.asm:35
WK_SHUFFLE_ATTRTBL              = $CF00 ; const, local, , sample022, , variable_define.asm:105
InitializeVirtSpritePatternLoop1 = $45A0 ; addr, local, , sample022, , sprite.asm:23
SetVirtAttrTableShuffleProc     = $45B6 ; addr, local, , sample022, , sprite.asm:49
SetVirtAttrTableLoop            = $45C1 ; addr, local, , sample022, , sprite.asm:58
SetVirtAttrTableSet209          = $45CD ; addr, local, , sample022, , sprite.asm:73
SetVirtAttrTableSetY            = $45CF ; addr, local, , sample022, , sprite.asm:77
SetVirtAttrTableLoopEndNextData = $45E4 ; addr, local, , sample022, , sprite.asm:102
SetVirtAttrTableLoopEnd         = $45F3 ; addr, local, , sample022, , sprite.asm:113
WK_VIRT_SPRATTRTBL              = $D300 ; const, local, , sample022, , variable_define.asm:128
ShuffleSpriteLoop               = $45FF ; addr, local, , sample022, , sprite.asm:145
WK_BCREGBACK                    = $C241 ; const, local, , sample022, , variable_define.asm:88
VDPRED                          = $4627 ; addr, local, , sample022, , vram.asm:16
CONST_VDPPORT1                  = $0099 ; const, local, , sample022, , variable_define.asm:11
VDPWRT                          = $463B ; addr, local, , sample022, , vram.asm:47
REDVRM                          = $4655 ; addr, local, , sample022, , vram.asm:88
CONST_VDPPORT0                  = $0098 ; const, local, , sample022, , variable_define.asm:10
WRTVRM                          = $465D ; addr, local, , sample022, , vram.asm:106
REDVRMSERIAL_End                = $4685 ; addr, local, , sample022, , vram.asm:165
REDVRMSERIALLOOP                = $4679 ; addr, local, , sample022, , vram.asm:151
WRTVRMFIL_End                   = $46A1 ; addr, local, , sample022, , vram.asm:204
WRTVRMFILLOOP                   = $4696 ; addr, local, , sample022, , vram.asm:191
WRTVRMSERIAL_End                = $46C0 ; addr, local, , sample022, , vram.asm:251
WRTVRMSERIALLOOP                = $46B4 ; addr, local, , sample022, , vram.asm:237
GetVRAM4x4                      = $46C1 ; addr, local, , sample022, , vram.asm:281
WK_CHECKPOSY                    = $C00E ; const, local, , sample022, , variable_define.asm:40
WK_CHECKPOSX                    = $C00D ; const, local, , sample022, , variable_define.asm:39
WK_VIRT_PTNNAMETBL              = $D000 ; const, local, , sample022, , variable_define.asm:117
WK_VRAM4X4_TBL                  = $C00F ; const, local, , sample022, , variable_define.asm:41
ClearSprite                     = $4746 ; addr, local, , sample022, , vram.asm:438
ClearSpriteLoop                 = $474F ; addr, local, , sample022, , vram.asm:447
ClearSpriteEnd                  = $475C ; addr, local, , sample022, , vram.asm:462
PutSprite                       = $4762 ; addr, local, , sample022, , vram.asm:476
PutPatternNameTable             = $476F ; addr, local, , sample022, , vram.asm:490
H_TIMI_BACKUP                   = $C002 ; const, local, , sample022, , variable_define.asm:29
H_TIMI_HANDLER                  = $479D ; addr, local, , sample022, , interval.asm:48
H_TIMI_HANDLER_L1               = $47A8 ; addr, local, , sample022, , interval.asm:64
IntervalEnd                     = $47F3 ; addr, local, , sample022, , interval.asm:136
SkipPutSprite                   = $47BD ; addr, local, , sample022, , interval.asm:80
SkipDecTime05                   = $47D7 ; addr, local, , sample022, , interval.asm:105
SetTime05                       = $47CD ; addr, local, , sample022, , interval.asm:96
DecTime05End                    = $47D4 ; addr, local, , sample022, , interval.asm:102
SkipRedrawScreen                = $47E6 ; addr, local, , sample022, , interval.asm:118
SetBlankScreen                  = $47E7 ; addr, local, , sample022, , interval.asm:122
SetBlankScreenFull              = $47E9 ; addr, local, , sample022, , interval.asm:126
__head                          = $0000 ; const, public, def, , ,
__tail                          = $48F8 ; const, public, def, , ,
__size                          = $48F8 ; const, public, def, , ,
