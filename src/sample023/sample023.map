CHGMOD                          = $005F ; const, local, , sample023, , initialize.asm:7
SETGRP                          = $007E ; const, local, , sample023, , initialize.asm:8
ERAFNK                          = $00CC ; const, local, , sample023, , initialize.asm:11
GTSTCK                          = $00D5 ; const, local, , sample023, , initialize.asm:12
GTTRIG                          = $00D8 ; const, local, , sample023, , initialize.asm:13
SNSMAT                          = $0141 ; const, local, , sample023, , initialize.asm:15
KILBUF                          = $0156 ; const, local, , sample023, , initialize.asm:16
EXTROM                          = $015F ; const, local, , sample023, , initialize.asm:19
SETPLT                          = $014D ; const, local, , sample023, , initialize.asm:20
LINWID                          = $F3AF ; const, local, , sample023, , initialize.asm:23
RG0SAV                          = $F3DF ; const, local, , sample023, , initialize.asm:24
FORCLR                          = $F3E9 ; const, local, , sample023, , initialize.asm:25
BAKCLR                          = $F3EA ; const, local, , sample023, , initialize.asm:26
BDRCLR                          = $F3EB ; const, local, , sample023, , initialize.asm:27
CLIKSW                          = $F3DB ; const, local, , sample023, , initialize.asm:28
INTCNT                          = $FCA2 ; const, local, , sample023, , initialize.asm:29
H_TIMI                          = $FD9F ; const, local, , sample023, , initialize.asm:30
H_PHYDIO                        = $FFA7 ; const, local, , sample023, , initialize.asm:31
ISMSX1FLG                       = $002D ; const, local, , sample023, , initialize.asm:34
CALSLT                          = $001C ; const, local, , sample023, , initialize.asm:37
H_NMI                           = $015F ; const, local, , sample023, , initialize.asm:38
EXPTBL                          = $FCC1 ; const, local, , sample023, , initialize.asm:39
RSLREG                          = $0138 ; const, local, , sample023, , initialize.asm:42
ENASLT                          = $0024 ; const, local, , sample023, , initialize.asm:43
CreateCharacterPattern          = $0000 ; addr, local, , sample023, , pcg_graphic2.asm:17
WK_VALUE08                      = $D840 ; const, local, , sample023, , variable_define.asm:216
CreateCharaPtnHiragana          = $0010 ; addr, local, , sample023, , pcg_graphic2.asm:32
CHRPTN_NUMALPHA                 = $02B5 ; addr, local, , sample023, , data_pcg.asm:114
WK_CHARDATAADR                  = $D82C ; const, local, , sample023, , variable_define.asm:187
CreateCharacterPatternLoop      = $0022 ; addr, local, , sample023, , pcg_graphic2.asm:49
CreateCharaPtnTiles             = $001C ; addr, local, , sample023, , pcg_graphic2.asm:44
CHRPTN_HIRAGANA                 = $040C ; addr, local, , sample023, , data_pcg.asm:197
CHRPTN                          = $0172 ; addr, local, , sample023, , data_pcg.asm:10
CreateCharacterPatternEnd       = $00D6 ; addr, local, , sample023, , pcg_graphic2.asm:218
WK_CHARCODE                     = $D82E ; const, local, , sample023, , variable_define.asm:188
GetCharacterVRAMAddress         = $00D7 ; addr, local, , sample023, , pcg_graphic2.asm:227
WRTVRMSERIAL                    = $433C ; addr, local, , sample023, , vram.asm:217
WK_HLREGBACK                    = $D84B ; const, local, , sample023, , variable_define.asm:233
ColorNumAlpha                   = $0078 ; addr, local, , sample023, , pcg_graphic2.asm:132
SetColorDatas                   = $008A ; addr, local, , sample023, , pcg_graphic2.asm:146
ColorHiragana                   = $0084 ; addr, local, , sample023, , pcg_graphic2.asm:141
CHRPTN_NUMALPHA_COLOR           = $02A5 ; addr, local, , sample023, , data_pcg.asm:106
CHRPTN_HIRAGANA_COLOR           = $02AD ; addr, local, , sample023, , data_pcg.asm:110
NextNotTiles                    = $00C8 ; addr, local, , sample023, , pcg_graphic2.asm:205
NextDataPattern                 = $00CB ; addr, local, , sample023, , pcg_graphic2.asm:209
InitialPCGDatas                 = $00E3 ; addr, local, , sample023, , pcg_graphic2.asm:248
WK_UNIONRAM                     = $C800 ; const, local, , sample023, , variable_define.asm:25
REDVRMSERIAL                    = $4301 ; addr, local, , sample023, , vram.asm:131
WRTVRMFIL                       = $4320 ; addr, local, , sample023, , vram.asm:176
CreateSpritePattern             = $014C ; addr, local, , sample023, , sprite_define.asm:11
SPRPTN                          = $05CF ; addr, local, , sample023, , data_sprite.asm:6
WK_SPRITE_PTNTBL                = $CB00 ; const, local, , sample023, , variable_define.asm:127
MemCpy                          = $4159 ; addr, local, , sample023, , common.asm:29
InitializeVirtSpritePattern     = $4CB0 ; addr, local, , sample023, , sprite.asm:10
SPRPTN_END                      = $0DCF ; addr, local, , sample023, , data_sprite.asm:302
GenMap                          = $0DD0 ; addr, local, , sample023, , map.asm:1
MAP_DATA                        = $0DDD ; addr, local, , sample023, , map.asm:10
WK_VIRT_PTNNAMETBL              = $C000 ; const, local, , sample023, , variable_define.asm:40
Header                          = $4000 ; addr, local, , sample023, , initialize.asm:75
Start                           = $4010 ; addr, local, , sample023, , initialize.asm:82
NORMAL_CHGMOD                   = $4040 ; addr, local, , sample023, , initialize.asm:115
CALSLT_CHGMOD                   = $4034 ; addr, local, , sample023, , initialize.asm:107
BiosInterSlotCall               = $4C79 ; addr, local, , sample023, , interslotcall.asm:22
SetGraphic2                     = $4048 ; addr, local, , sample023, , initialize.asm:121
BiosCall                        = $4C72 ; addr, local, , sample023, , interslotcall.asm:4
NORMAL_SETGRP2                  = $405A ; addr, local, , sample023, , initialize.asm:133
SetWidth32                      = $405D ; addr, local, , sample023, , initialize.asm:138
SetERAFNK                       = $4062 ; addr, local, , sample023, , initialize.asm:143
NORMAL_SETERAFNK                = $4074 ; addr, local, , sample023, , initialize.asm:155
SetCLIKSW                       = $4077 ; addr, local, , sample023, , initialize.asm:159
WK_VRAM_SYNC                    = $D827 ; const, local, , sample023, , variable_define.asm:182
MemFil                          = $4152 ; addr, local, , sample023, , common.asm:11
PAGE0_FUNC                      = $D81C ; const, local, , sample023, , variable_define.asm:171
ChangePage0Call                 = $44A8 ; addr, local, , sample023, , changepage.asm:5
SetColorPalleteMSX1             = $40CD ; addr, local, , sample023, , initialize.asm:216
SkipColorPallete                = $4113 ; addr, local, , sample023, , initialize.asm:271
ColorPalleteData                = $40F3 ; addr, local, , sample023, , initialize.asm:252
ColorPalleteSetLoop             = $40DB ; addr, local, , sample023, , initialize.asm:228
BiosNotFDDSubRomCall            = $4C75 ; addr, local, , sample023, , interslotcall.asm:16
WK_GAMESTATUS                   = $D824 ; const, local, , sample023, , variable_define.asm:176
GameInitialize                  = $4727 ; addr, local, , sample023, , gameinit.asm:1
HTIMIHookLoop                   = $411A ; addr, local, , sample023, , sample023.asm:9
VSYNC_WAIT_CNT                  = $D823 ; const, local, , sample023, , variable_define.asm:175
VSYNC_Wait                      = $411F ; addr, local, , sample023, , sample023.asm:18
StartGameMain                   = $4126 ; addr, local, , sample023, , sample023.asm:27
TitleDisplayProc                = $4B28 ; addr, local, , sample023, , title.asm:5
GameMainProc                    = $47B0 ; addr, local, , sample023, , game.asm:1
DialogProc                      = $4B25 ; addr, local, , sample023, , dialog.asm:5
GameOverProc                    = $4B30 ; addr, local, , sample023, , gameover.asm:1
NextHTIMIHook                   = $4147 ; addr, local, , sample023, , sample023.asm:48
MemFilLoop                      = $4152 ; addr, local, , sample023, , common.asm:13
MemCpyLoop                      = $4159 ; addr, local, , sample023, , common.asm:31
IntMemCpy                       = $4162 ; addr, local, , sample023, , common.asm:50
IntMemCpyLoop                   = $4162 ; addr, local, , sample023, , common.asm:52
SortValues                      = $416B ; addr, local, , sample023, , common.asm:68
WK_SORTVALUE01                  = $D842 ; const, local, , sample023, , variable_define.asm:220
SortValuesLoop1                 = $417C ; addr, local, , sample023, , common.asm:95
WK_SORTVALUE02                  = $D843 ; const, local, , sample023, , variable_define.asm:221
SortValuesLoop2                 = $4184 ; addr, local, , sample023, , common.asm:104
WK_SORTVALUE04                  = $D845 ; const, local, , sample023, , variable_define.asm:223
WK_SORTVALUE03                  = $D844 ; const, local, , sample023, , variable_define.asm:222
SortValuesLoop2Next             = $41A7 ; addr, local, , sample023, , common.asm:126
SortValuesLoop2Swap             = $419B ; addr, local, , sample023, , common.asm:119
SortValuesEnd                   = $41C1 ; addr, local, , sample023, , common.asm:145
InitRandom                      = $41C2 ; addr, local, , sample023, , common.asm:154
WK_RANDOM_VALUE                 = $D841 ; const, local, , sample023, , variable_define.asm:217
RandomValue                     = $41C9 ; addr, local, , sample023, , common.asm:161
AbsA                            = $41DD ; addr, local, , sample023, , common.asm:188
Divide                          = $41E2 ; addr, local, , sample023, , common.asm:208
DivLoop                         = $41EA ; addr, local, , sample023, , common.asm:214
DivideBy8                       = $41F0 ; addr, local, , sample023, , common.asm:226
DivideBy4                       = $4205 ; addr, local, , sample023, , common.asm:257
CalcMulti                       = $4216 ; addr, local, , sample023, , common.asm:287
CalcMulti1                      = $421E ; addr, local, , sample023, , common.asm:300
CalcMulti2                      = $4222 ; addr, local, , sample023, , common.asm:324
NumToStr                        = $4227 ; addr, local, , sample023, , common.asm:343
WK_STRINGBUF                    = $D84A ; const, local, , sample023, , variable_define.asm:230
WK_NUMTOCHARVAL                 = $D82B ; const, local, , sample023, , variable_define.asm:186
NumToStr1thPlace                = $427D ; addr, local, , sample023, , common.asm:415
NumToStr10thPlace               = $425C ; addr, local, , sample023, , common.asm:390
NumToStr100thPlace              = $4240 ; addr, local, , sample023, , common.asm:369
NumToStrEnd                     = $4284 ; addr, local, , sample023, , common.asm:422
GetString                       = $4288 ; addr, local, , sample023, , common.asm:438
GetStingLoop                    = $429D ; addr, local, , sample023, , common.asm:463
GetStringLoopEnd                = $42A8 ; addr, local, , sample023, , common.asm:476
GetStringByIndex                = $42AD ; addr, local, , sample023, , common.asm:508
GetStringByIndexLoop            = $42B1 ; addr, local, , sample023, , common.asm:516
VDPRED                          = $42C1 ; addr, local, , sample023, , vram.asm:17
CONST_VDPPORT1                  = $0099 ; const, local, , sample023, , variable_define.asm:11
VDPWRT                          = $42D5 ; addr, local, , sample023, , vram.asm:48
REDVRM                          = $42EF ; addr, local, , sample023, , vram.asm:89
CONST_VDPPORT0                  = $0098 ; const, local, , sample023, , variable_define.asm:10
WRTVRM                          = $42F7 ; addr, local, , sample023, , vram.asm:107
REDVRMSERIAL_End                = $431F ; addr, local, , sample023, , vram.asm:166
REDVRMSERIALLOOP                = $4313 ; addr, local, , sample023, , vram.asm:152
WRTVRMFIL_End                   = $433B ; addr, local, , sample023, , vram.asm:205
WRTVRMFILLOOP                   = $4330 ; addr, local, , sample023, , vram.asm:192
WRTVRMSERIAL_End                = $435A ; addr, local, , sample023, , vram.asm:252
WRTVRMSERIALLOOP                = $434E ; addr, local, , sample023, , vram.asm:238
GetVRAM4x6                      = $435B ; addr, local, , sample023, , vram.asm:288
WK_VRAM4X6_TBL                  = $D800 ; const, local, , sample023, , variable_define.asm:164
WK_CHECKPOSY                    = $D82A ; const, local, , sample023, , variable_define.asm:185
GetVRAM4x6LoopEnd               = $43B0 ; addr, local, , sample023, , vram.asm:374
WK_CHECKPOSX                    = $D829 ; const, local, , sample023, , variable_define.asm:184
WK_VALUE01                      = $D839 ; const, local, , sample023, , variable_define.asm:209
GetVRAM4x6Loop                  = $4393 ; addr, local, , sample023, , vram.asm:340
ClearScreen                     = $43B4 ; addr, local, , sample023, , vram.asm:386
ClearSprite                     = $43C0 ; addr, local, , sample023, , vram.asm:401
WK_VIRT_SPRATTRTBL              = $C980 ; const, local, , sample023, , variable_define.asm:84
ClearSpriteLoop                 = $43C7 ; addr, local, , sample023, , vram.asm:408
ClearSpriteEnd                  = $43D4 ; addr, local, , sample023, , vram.asm:423
WK_SPRREDRAW_FINE               = $D830 ; const, local, , sample023, , variable_define.asm:192
PutSprite                       = $43DA ; addr, local, , sample023, , vram.asm:437
PutPatternNameTable             = $43E7 ; addr, local, , sample023, , vram.asm:451
INIT_H_TIMI_HANDLER             = $43F4 ; addr, local, , sample023, , interval.asm:14
H_TIMI_BACKUP                   = $D81E ; const, local, , sample023, , variable_define.asm:174
H_TIMI_HANDLER                  = $4415 ; addr, local, , sample023, , interval.asm:48
H_TIMI_HANDLER_L1               = $4420 ; addr, local, , sample023, , interval.asm:64
IntervalEnd                     = $44A3 ; addr, local, , sample023, , interval.asm:193
WK_KEYIN_INTERVAL               = $D832 ; const, local, , sample023, , variable_define.asm:196
DecKeyinInterval                = $442A ; addr, local, , sample023, , interval.asm:74
SkipDecKeyinInterval            = $442E ; addr, local, , sample023, , interval.asm:80
KeyInputProc                    = $4B33 ; addr, local, , sample023, , keyinput.asm:21
WK_MOVESTOPTIME                 = $D85A ; const, local, , sample023, , variable_define.asm:259
SkipDecMoveStopTime             = $4458 ; addr, local, , sample023, , interval.asm:118
WK_PLAYERDIST_PRE               = $D834 ; const, local, , sample023, , variable_define.asm:198
DecMoveStopTime                 = $4447 ; addr, local, , sample023, , interval.asm:102
WK_ACCELCNT                     = $D858 ; const, local, , sample023, , variable_define.asm:257
WK_XMOVEVAL                     = $D859 ; const, local, , sample023, , variable_define.asm:258
VBLANK_sprredefine              = $4531 ; addr, local, , sample023, , vb_sprredefine.asm:7
SkipPutSprite                   = $446C ; addr, local, , sample023, , interval.asm:135
SkipDecTime05                   = $4486 ; addr, local, , sample023, , interval.asm:162
WK_TIME05                       = $D826 ; const, local, , sample023, , variable_define.asm:179
SetTime05                       = $447C ; addr, local, , sample023, , interval.asm:151
DecTime05End                    = $4483 ; addr, local, , sample023, , interval.asm:158
WK_REDRAW_FINE                  = $D828 ; const, local, , sample023, , variable_define.asm:183
SkipRedrawScreen                = $4495 ; addr, local, , sample023, , interval.asm:175
SetBlankScreen                  = $4497 ; addr, local, , sample023, , interval.asm:179
SetBlankScreenFull              = $4499 ; addr, local, , sample023, , interval.asm:183
NO_SS                           = $44DE ; addr, local, , sample023, , changepage.asm:74
Page0FuncRetAddr                = $4503 ; addr, local, , sample023, , changepage.asm:126
WK_SPRPTNCHG                    = $D85B ; const, local, , sample023, , variable_define.asm:260
SPRPTN_VECT_NUM                 = $4562 ; addr, local, , sample023, , vb_sprredefine.asm:64
WK_ANIME_PTN                    = $D831 ; const, local, , sample023, , variable_define.asm:193
WallCollision                   = $458A ; addr, local, , sample023, , collision.asm:8
WK_POSY                         = $D853 ; const, local, , sample023, , variable_define.asm:243
WallCollisionCheckX             = $4594 ; addr, local, , sample023, , collision.asm:18
WK_POSX                         = $D852 ; const, local, , sample023, , variable_define.asm:242
WallCollisionXPosAdj8           = $45A3 ; addr, local, , sample023, , collision.asm:32
WallCollisionXPosAdj240         = $45A7 ; addr, local, , sample023, , collision.asm:37
WallCollisionDiv8               = $45A9 ; addr, local, , sample023, , collision.asm:41
WallCollisionSetXPos            = $45B1 ; addr, local, , sample023, , collision.asm:51
WK_SURROUNDFLG                  = $D854 ; const, local, , sample023, , variable_define.asm:244
WallCollisionWallChk1           = $45BF ; addr, local, , sample023, , collision.asm:69
WK_FALLDOWN                     = $D856 ; const, local, , sample023, , variable_define.asm:255
WallCollisionWallChk1Start      = $45CC ; addr, local, , sample023, , collision.asm:87
WK_JUMPCNT                      = $D855 ; const, local, , sample023, , variable_define.asm:254
WallCollisionWallChk1Chk05      = $45CC ; addr, local, , sample023, , collision.asm:91
WallCollisionWallChk1Chk06      = $45D9 ; addr, local, , sample023, , collision.asm:101
CONST_SPACE                     = $0020 ; const, local, , sample023, , variable_define.asm:14
WallCollisionWallChk1IsWall     = $45EA ; addr, local, , sample023, , collision.asm:118
WallCollisionWallChk1UpOkay     = $45E6 ; addr, local, , sample023, , collision.asm:111
WallCollisionWallChk2           = $45EC ; addr, local, , sample023, , collision.asm:123
WallCollisionWallChk2Chk15      = $45EC ; addr, local, , sample023, , collision.asm:127
WallCollisionWallChk2Chk16      = $45FA ; addr, local, , sample023, , collision.asm:137
WallCollisionWallChk2IsWall     = $460B ; addr, local, , sample023, , collision.asm:154
WallCollisionWallChk2DownOkay   = $4607 ; addr, local, , sample023, , collision.asm:147
WallCollisionWallChk3           = $460F ; addr, local, , sample023, , collision.asm:161
WallCollisionWallChkLROkayEnd   = $471E ; addr, local, , sample023, , collision.asm:373
WallCollisionWallChk3Chk08      = $4614 ; addr, local, , sample023, , collision.asm:174
WallCollisionWallChk3Chk0C      = $4629 ; addr, local, , sample023, , collision.asm:188
WallCollisionWallChk3IsWall     = $4696 ; addr, local, , sample023, , collision.asm:265
WallCollisionWallChk3Chk10      = $463E ; addr, local, , sample023, , collision.asm:202
WallCollisionWallChk3Chk09      = $4653 ; addr, local, , sample023, , collision.asm:216
WallCollisionWallChk3Chk0D      = $4668 ; addr, local, , sample023, , collision.asm:230
WallCollisionWallChk3Chk11      = $467D ; addr, local, , sample023, , collision.asm:244
WallCollisionWallChk3LeftOkay   = $4692 ; addr, local, , sample023, , collision.asm:258
WallCollisionWallChk4           = $4698 ; addr, local, , sample023, , collision.asm:270
WallCollisionWallChk4Chk0B      = $4698 ; addr, local, , sample023, , collision.asm:275
WallCollisionWallChk4Chk0F      = $46AD ; addr, local, , sample023, , collision.asm:289
WallCollisionWallChk4IsWall     = $471A ; addr, local, , sample023, , collision.asm:366
WallCollisionWallChk4Chk13      = $46C2 ; addr, local, , sample023, , collision.asm:303
WallCollisionWallChk4Chk0A      = $46D7 ; addr, local, , sample023, , collision.asm:317
WallCollisionWallChk4Chk0E      = $46EC ; addr, local, , sample023, , collision.asm:331
WallCollisionWallChk4Chk12      = $4701 ; addr, local, , sample023, , collision.asm:345
WallCollisionWallChk4RightOkay  = $4716 ; addr, local, , sample023, , collision.asm:359
WallCollisionWallChkEnd         = $4722 ; addr, local, , sample023, , collision.asm:379
WallCollisionEnd                = $4726 ; addr, local, , sample023, , collision.asm:385
WK_SPRITE0_NUM                  = $D82F ; const, local, , sample023, , variable_define.asm:191
WK_PLAYERDIST                   = $D833 ; const, local, , sample023, , variable_define.asm:197
WK_SPRITE_MOVETBL               = $CA00 ; const, local, , sample023, , variable_define.asm:97
MovePlayer                      = $480C ; addr, local, , sample023, , player.asm:16
SetVirtAttrTable                = $4CC5 ; addr, local, , sample023, , sprite.asm:44
ShuffleSprite                   = $4CE3 ; addr, local, , sample023, , sprite.asm:99
GameMainProcDebugEnd            = $4804 ; addr, local, , sample023, , game.asm:63
GameMainProcEnd                 = $4809 ; addr, local, , sample023, , game.asm:69
MovePlayerUpDown                = $4825 ; addr, local, , sample023, , player.asm:42
MovePlayerJumpNow               = $4979 ; addr, local, , sample023, , player.asm:388
MovePlayerFloorCheck            = $488F ; addr, local, , sample023, , player.asm:167
MovePlayerCheckLadder11         = $482B ; addr, local, , sample023, , player.asm:55
MovePlayerCheckLadder15         = $483B ; addr, local, , sample023, , player.asm:72
MovePlayerLadder                = $4872 ; addr, local, , sample023, , player.asm:138
MovePlayerCheckLadder12         = $4832 ; addr, local, , sample023, , player.asm:61
MovePlayerJump                  = $4853 ; addr, local, , sample023, , player.asm:106
MovePlayerFloorCheckLadderDownCancel = $484D ; addr, local, , sample023, , player.asm:96
MovePlayerCheckLadder16         = $4844 ; addr, local, , sample023, , player.asm:84
WK_LADDERFLG                    = $D85D ; const, local, , sample023, , variable_define.asm:262
MovePlayerFloorCheckDownCheck   = $48BF ; addr, local, , sample023, , player.asm:210
WK_JUMPSTARTDIST                = $D85C ; const, local, , sample023, , variable_define.asm:261
MovePlayerFloorCheckDownLadder  = $48B1 ; addr, local, , sample023, , player.asm:196
MovePlayerFloorCheckEnd         = $492F ; addr, local, , sample023, , player.asm:319
CONST_MOVEDOWNOK                = $0004 ; const, local, , sample023, , variable_define.asm:17
MovePlayerCheckFallDown         = $48EB ; addr, local, , sample023, , player.asm:245
MovePlayerSetFallDown           = $48FF ; addr, local, , sample023, , player.asm:274
MovePlayerSetFallDownXAdjust    = $492A ; addr, local, , sample023, , player.asm:314
MovePlayerSetFallDownXAdjustR   = $4922 ; addr, local, , sample023, , player.asm:307
MovePlayerSetFallDownXAdjustL   = $4918 ; addr, local, , sample023, , player.asm:298
MovePlayerCheckJump             = $496C ; addr, local, , sample023, , player.asm:377
MovePlayerLadderMove            = $4946 ; addr, local, , sample023, , player.asm:342
MovePlayerChangeDist            = $4ACB ; addr, local, , sample023, , player.asm:703
MovePlayerLadderMoveUp          = $4956 ; addr, local, , sample023, , player.asm:357
MovePlayerLadderMoveDown        = $4961 ; addr, local, , sample023, , player.asm:367
MovePlayerSetAnime              = $49C0 ; addr, local, , sample023, , player.asm:443
MovePlayerJumpCancel            = $498A ; addr, local, , sample023, , player.asm:402
MovePlayerJumpCancelDoCancel    = $49A0 ; addr, local, , sample023, , player.asm:418
MoveRightAnime                  = $49D8 ; addr, local, , sample023, , player.asm:466
MoveLeftAnime                   = $49F2 ; addr, local, , sample023, , player.asm:492
MoveUpAnime                     = $49D6 ; addr, local, , sample023, , player.asm:462
MovePlayerAnimeEnd              = $4AC9 ; addr, local, , sample023, , player.asm:699
MovePlayerAnimeDoAnime          = $4A11 ; addr, local, , sample023, , player.asm:523
CONST_MOVERIGHTOK               = $0001 ; const, local, , sample023, , variable_define.asm:19
MoveRightAddPosX                = $49E5 ; addr, local, , sample023, , player.asm:480
MoveLRSetMoveStopTimer          = $4A0C ; addr, local, , sample023, , player.asm:517
CONST_MOVELEFTOK                = $0002 ; const, local, , sample023, , variable_define.asm:18
MoveLeftSubPosX                 = $49FF ; addr, local, , sample023, , player.asm:506
MovePlayerAnimeJumpSetYFallDown = $4A21 ; addr, local, , sample023, , player.asm:537
MovePlayerAnimeNotJump          = $4A6D ; addr, local, , sample023, , player.asm:608
MovePlayerAnimeJumpSetYJump     = $4A25 ; addr, local, , sample023, , player.asm:543
MovePlayerAnimeDoAnimeDown      = $4A3C ; addr, local, , sample023, , player.asm:565
JUMP_OFFSET                     = $4B1D ; addr, local, , sample023, , player.asm:776
MovePlayerJumpInitYPos          = $4A45 ; addr, local, , sample023, , player.asm:574
WK_TRIGGERA                     = $D835 ; const, local, , sample023, , variable_define.asm:199
SetPlayerSpriteInfo             = $4AEA ; addr, local, , sample023, , player.asm:734
MovePlayerIncAnimeNum           = $4A9B ; addr, local, , sample023, , player.asm:654
MovePlayerAccelUp               = $4A84 ; addr, local, , sample023, , player.asm:627
MovePlayerAccelUpSpeed          = $4A96 ; addr, local, , sample023, , player.asm:648
MovePlayerIncAnimeNotInc        = $4AAB ; addr, local, , sample023, , player.asm:667
MovePlayerIncAnimeInc           = $4AB8 ; addr, local, , sample023, , player.asm:682
MovePlayerIncAnimeFallInc       = $4AB3 ; addr, local, , sample023, , player.asm:676
MovePlayerResetAnimeNum         = $4AC5 ; addr, local, , sample023, , player.asm:694
MovePlayerEnd                   = $4AE5 ; addr, local, , sample023, , player.asm:722
WK_WALKSPEED                    = $D857 ; const, local, , sample023, , variable_define.asm:256
WK_VB_VALUE01                   = $D838 ; const, local, , sample023, , variable_define.asm:206
KeyInputProcCheckZkey           = $4B3B ; addr, local, , sample023, , keyinput.asm:31
KeyInputProcZup                 = $4B4F ; addr, local, , sample023, , keyinput.asm:51
KeyInputProc_IsCURSOR           = $4BE6 ; addr, local, , sample023, , keyinput.asm:177
KeyInputProcZpress              = $4B47 ; addr, local, , sample023, , keyinput.asm:43
KeyInputProcCheckXKey           = $4B68 ; addr, local, , sample023, , keyinput.asm:72
KeyInputProcZupStep2            = $4B5F ; addr, local, , sample023, , keyinput.asm:63
KeyInputProcXup                 = $4B7F ; addr, local, , sample023, , keyinput.asm:93
WK_TRIGGERB                     = $D836 ; const, local, , sample023, , variable_define.asm:200
KeyInputProcXpress              = $4B77 ; addr, local, , sample023, , keyinput.asm:85
KeyInputProc_IsAbutton          = $4B8C ; addr, local, , sample023, , keyinput.asm:104
KeyInputProcAup                 = $4BA4 ; addr, local, , sample023, , keyinput.asm:124
KeyInputProcApress              = $4B9C ; addr, local, , sample023, , keyinput.asm:116
KeyInputProc_IsAupStep2         = $4BB4 ; addr, local, , sample023, , keyinput.asm:136
KeyInputProc_IsBbutton          = $4BC1 ; addr, local, , sample023, , keyinput.asm:147
KeyInputProcBup                 = $4BD9 ; addr, local, , sample023, , keyinput.asm:167
KeyInputProcBpress              = $4BD1 ; addr, local, , sample023, , keyinput.asm:159
KeyInputProc_End                = $4C6E ; addr, local, , sample023, , keyinput.asm:323
KeyInputProcSetInterval5        = $4BFF ; addr, local, , sample023, , keyinput.asm:200
KeyInputProcSetInterval         = $4C02 ; addr, local, , sample023, , keyinput.asm:207
KeyInputProc_KeyInEnd           = $4C14 ; addr, local, , sample023, , keyinput.asm:235
KeyInputProc_IsJOYSTICK         = $4C0C ; addr, local, , sample023, , keyinput.asm:222
KeyInputProc_SetDist            = $4C43 ; addr, local, , sample023, , keyinput.asm:283
KeyInputProc_KeyEndAdjTRIGAOff  = $4C26 ; addr, local, , sample023, , keyinput.asm:249
KeyInputProc_KeyEndAdjSTCK      = $4C27 ; addr, local, , sample023, , keyinput.asm:253
KeyInputProc_Judge4             = $4C2E ; addr, local, , sample023, , keyinput.asm:261
KeyInputProc_Judge6             = $4C35 ; addr, local, , sample023, , keyinput.asm:268
KeyInputProc_Judge8             = $4C3C ; addr, local, , sample023, , keyinput.asm:275
KeyInputProc_JumpNow            = $4C46 ; addr, local, , sample023, , keyinput.asm:287
KeyInputProc_KeyInCancelAtJump  = $4C62 ; addr, local, , sample023, , keyinput.asm:311
KeyInputProc_LadderNow          = $4C4D ; addr, local, , sample023, , keyinput.asm:294
KeyInputProc_KeyInCancel        = $4C6A ; addr, local, , sample023, , keyinput.asm:318
BiosCallNotFDD                  = $4C74 ; addr, local, , sample023, , interslotcall.asm:10
BiosFDDSubRomCall               = $4C82 ; addr, local, , sample023, , interslotcall.asm:35
WK_SHUFFLE_ATTRTBL              = $C900 ; const, local, , sample023, , variable_define.asm:72
InitializeVirtSpritePatternLoop1 = $4CB5 ; addr, local, , sample023, , sprite.asm:23
SetVirtAttrTableShuffleProc     = $4CC8 ; addr, local, , sample023, , sprite.asm:48
CONST_SPRITETOTAL               = $0010 ; const, local, , sample023, , variable_define.asm:12
SetVirtAttrTableLoop            = $4CCD ; addr, local, , sample023, , sprite.asm:54
SetVirtAttrTableSetY            = $4CCE ; addr, local, , sample023, , sprite.asm:58
SetVirtAttrTableLoopEndNextData = $4CE0 ; addr, local, , sample023, , sprite.asm:85
SetVirtAttrTableLoopEnd         = $4CE2 ; addr, local, , sample023, , sprite.asm:89
ShuffleSpriteLoop               = $4CEE ; addr, local, , sample023, , sprite.asm:121
SPRITE_JUMPFALL                 = $4D15 ; addr, local, , sample023, , sprite.asm:180
SPRITE_SQUAT_R                  = $4D19 ; addr, local, , sample023, , sprite.asm:184
SPRITE_SQUAT_L                  = $4D1D ; addr, local, , sample023, , sprite.asm:187
TRIGFUNC_TBL                    = $4D22 ; addr, local, , sample023, , data_trigono.asm:38
__head                          = $0000 ; const, public, def, , ,
__tail                          = $4E22 ; const, public, def, , ,
__size                          = $4E22 ; const, public, def, , ,
